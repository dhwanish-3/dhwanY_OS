[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

alias userSP R0;
userSP = SP;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

alias physicalPageNumber R1;
alias offset R2;
alias physicalAddress R3;
alias page_table R5;

page_table = PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1];

physicalPageNumber = [page_table + 2 * ((userSP - 4) / 512)];
offset = (userSP - 4) % 512;
physicalAddress = physicalPageNumber * 512 + offset;

alias fileName R6;
fileName = [physicalAddress];

alias inodeEntry R7;
alias flag R8;

inodeEntry = 0;
flag = 0;

while (inodeEntry < MAX_FILE_NUM) do
    if (fileName == [INODE_TABLE + inodeEntry * 16 + 1]) then
        if ([INODE_TABLE + inodeEntry * 16] == EXEC) then
            flag = 1;
            break;
        endif;
    endif;
    inodeEntry = inodeEntry + 1;
endwhile;

if (flag == 0) then
    physicalPageNumber = [page_table + 2 * ((userSP - 1) / 512)];
    offset = (userSP - 1) % 512;
    [physicalPageNumber * 512 + offset] = -1;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    SP = userSP;
    ireturn;
endif;

multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);

R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];

call MOD_1;

multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);

alias userAreaPageNumber R9;
userAreaPageNumber = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];

[MEMORY_FREE_LIST + userAreaPageNumber] = [MEMORY_FREE_LIST + userAreaPageNumber] + 1;

[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = userAreaPageNumber * 512;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7] = inodeEntry;

// Allocating pages
// Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

// Heap
R1 = 1;
call MOD_2;
[PTBR + 4] = R0;
[PTBR + 5] = "0110";

R1 = 1;
call MOD_2;
[PTBR + 6] = R0;
[PTBR + 7] = "0110";

// Stack
R1 = 1;
call MOD_2;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";

R1 = 1;
call MOD_2;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";

multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

// Code
alias numBlocks R10;
alias i R11;

i = 0;
numBlocks = (([INODE_TABLE + 16 * inodeEntry + 2] - 1) / 512) + 1;

multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

while (i < 4) do
    if (i < numBlocks) then
        R1 = 1;
        call MOD_2;
        [PTBR + 8 + 2 * i] = R0;
        [PTBR + 9 + 2 * i] = "0100";
    else
        [PTBR + 8 + 2 * i] = -1;
        [PTBR + 9 + 2 * i] = "0000";
    endif;
    i = i + 1;
endwhile;

multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

i = 0;
while (i < numBlocks) do

    // loadi([PTBR + 8 + 2 * i], [INODE_TABLE + inodeEntry * 16 + 8 + i]);

    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);

    R1 = 2;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = [PTBR + 8 + 2 * i];
    R4 = [INODE_TABLE + inodeEntry * 16 + 8 + i];

    call MOD_4;
    
    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);

    i = i + 1;
endwhile;

// per-process resource table initialization
i = 1;
while (i < 9) do
    [([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] + 1) * 512 - 2 * i] = -1;
    i = i + 1;
endwhile;

[[PTBR + 16] * 512] = [[PTBR + 8] * 512 + 1];

SP = 8 * 512;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;