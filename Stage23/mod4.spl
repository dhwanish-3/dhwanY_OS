alias functionNum R1;
alias currentPID R2;
alias word R3;

// Disk Store
if (functionNum == 1) then
    alias pageNumber R3;
    alias blockNum R4;

    multipush(R1, R2, R3, R4);
    R1 = 3;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4);

    [DISK_STATUS_TABLE + 1] = 1;
    [DISK_STATUS_TABLE + 2] = pageNumber;
    [DISK_STATUS_TABLE + 3] = blockNum;

    store(pageNumber, blockNum);

    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;
    multipush(R1, R2, R3, R4);
    call SCHEDULER;
    multipop(R1, R2, R3, R4);
    return;
endif;

// Disk Load
if (functionNum == 2) then
    alias memoryPage R3;
    alias diskBlock R4;
    multipush(R1, R2, R3, R4);

    R1 = 3;
    R2 = currentPID;
    call MOD_0;

    multipop(R1, R2, R3, R4);

    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = memoryPage;
    [DISK_STATUS_TABLE + 3] = diskBlock;

    load(memoryPage, diskBlock);
    
    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;

    call MOD_5;

    return;
endif;

// Terminal Write
if (functionNum == 3) then
    multipush(R1, R2, R3);
    functionNum = 8;

    call MOD_0;

    multipop(R1, R2, R3);

    print word;

    multipush(R1, R2, R3);

    functionNum = 9;

    call MOD_0;

    multipop(R1, R2, R3);

    return;
endif;

// Terminal Read
if (functionNum == 4) then
    multipush(R1, R2, R3);
    functionNum = 8;

    call MOD_0;

    multipop(R1, R2, R3);

    read;

    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_TERMINAL;

    multipush(R1, R2, R3);

    call MOD_5;

    multipop(R1, R2, R3);

    [[PTBR + 2 * (word / 512)] * 512 + (word % 512)] = [PROCESS_TABLE + currentPID * 16 + 8];
    
    return;
endif;