// exhandler
loadi(2, 15);
loadi(3, 16);

// timer interrupt
loadi(4, 17);
loadi(5, 18);

// write interrupt
loadi(16, 29);
loadi(17, 30);

// int 10
loadi(22, 35);
loadi(23, 36);

// int 8 (fork)
loadi(18, 31);
loadi(19, 32);

// Library
loadi(63, 13);
loadi(64, 14);

// init
loadi(65, 7);
loadi(66, 8);

// module 5
loadi(50, 63);
loadi(51, 64);

// module 0
loadi(40, 53);
loadi(41, 54);

// module 4
loadi(48, 61);
loadi(49, 62);

// console interrupt
loadi(8, 21);
loadi(9, 22);

// int 6
loadi(14, 27);
loadi(15, 28);

// int 9
loadi(20, 33);
loadi(21, 34);

// int 11
loadi(24, 37);
loadi(25, 38);

// int 13
loadi(28, 41);
loadi(29, 42);

// int 14
loadi(30, 43);
loadi(31, 44);

// int 15
loadi(32, 45);
loadi(33, 46);

// module 1
loadi(42, 55);
loadi(43, 56);

// module 2
loadi(44, 57);
loadi(45, 58);

// inode user table
loadi(59, 3);
loadi(60, 4);

// disk interrupt
loadi(6, 19);
loadi(7, 20);

// int4
loadi(10, 23);
loadi(11, 24);

// root file
loadi(62, 5);

// disk free list
loadi(61, 2);

// memory free list initialization
alias i R0;
i = 0;
while (i < 128) do
    if (i < 76) then
        [MEMORY_FREE_LIST  + i] = 1;
    else
        [MEMORY_FREE_LIST + i] = 0;
    endif;
    i = i + 1;
endwhile;

[MEMORY_FREE_LIST + 76] = 1;
[MEMORY_FREE_LIST + 77] = 1;
[MEMORY_FREE_LIST + 78] = 1;
[MEMORY_FREE_LIST + 79] = 1;
[MEMORY_FREE_LIST + 80] = 1;
[MEMORY_FREE_LIST + 81] = 1;
[MEMORY_FREE_LIST + 82] = 1;

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
[PTBR + 16] = 76;
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 3] = 1; // user id
[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8 * 512;
[PROCESS_TABLE + 16 + 14] = PTBR;
[PROCESS_TABLE + 16 + 15] = PTLR;
[PROCESS_TABLE + 16 + 4] = CREATED;
[76 * 512] = [65 * 512 + 1];

// per-process resource table for init
i = 1;
while (i < 9) do
    [([PROCESS_TABLE + 16 + 11] + 1) * 512 - 2 * i] = -1;
    i = i + 1;
endwhile;

// disk map table initialization for init

[DISK_MAP_TABLE + 10 + 2] = -1;
[DISK_MAP_TABLE + 10 + 3] = -1;
[DISK_MAP_TABLE + 10 + 4] = 7;
[DISK_MAP_TABLE + 10 + 5] = 8;
[DISK_MAP_TABLE + 10 + 6] = -1;
[DISK_MAP_TABLE + 10 + 7] = -1;
[DISK_MAP_TABLE + 10 + 8] = -1;
[DISK_MAP_TABLE + 10 + 9] = -1;

i = 2;
while (i < 16) do
    [PROCESS_TABLE + 16 * i + 4] = TERMINATED;
    i = i + 1;
endwhile;

[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;
[SYSTEM_STATUS_TABLE + 0] = 1;
[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;

// initialization of semaphore table
i = 0;
while (i < MAX_SEM_COUNT) do
    [SEMAPHORE_TABLE + i * 4] = -1;
    [SEMAPHORE_TABLE + i * 4 + 1] = 0;
    i = i + 1;
endwhile;

// initialization of file status table
i = 0;
while (i < MAX_FILE_NUM) do
    [FILE_STATUS_TABLE + i * 4 + 0] = -1;
    [FILE_STATUS_TABLE + i * 4 + 1] = -1;
    i = i + 1;
endwhile;

// initialization of buffer table
i = 0;
while (i < MAX_BUFFER) do
    [BUFFER_TABLE + i * 4 + 0] = -1;
    [BUFFER_TABLE + i * 4 + 1] = 0;
    [BUFFER_TABLE + i * 4 + 2] = -1;
    i = i + 1;
endwhile;
return;