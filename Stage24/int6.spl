// Set mode flag to system call number
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;

alias userSP R0;
userSP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

alias returnAddress R1;
returnAddress = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512;

alias fileDescriptor R2;
fileDescriptor = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];

if (fileDescriptor != -1) then // File Read
    if (fileDescriptor < 0 || fileDescriptor > 7) then
        [returnAddress] = -1;
    else
        alias resourceTableEntry R3;
        resourceTableEntry = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + RESOURCE_TABLE_OFFSET + fileDescriptor * 2;

        if ([resourceTableEntry + 0] != FILE) then
            [returnAddress] = -1;
        else
            alias inodeIndex R4;
            alias openFileTableEntry R5;
            openFileTableEntry = [resourceTableEntry + 1];
            inodeIndex = [OPEN_FILE_TABLE + openFileTableEntry * 4 + 0];

            multipush(R0, R1, R2, R3, R4, R5);
            R1 = 4;
            R2 = inodeIndex;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER; // acquire inode
            R9 = R0;
            multipop(R0, R1, R2, R3, R4, R5);

            if (R9 == -1) then
                [returnAddress] = -1;
            else
                alias lSeek R6;
                lSeek = OPEN_FILE_TABLE + openFileTableEntry * 4 + 2;

                alias wordAddress R7;
                wordAddress = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + (userSP - 3) % 512];
                wordAddress = [PTBR + 2 * (wordAddress / 512)] * 512 + wordAddress % 512;

                if (inodeIndex == INODE_ROOT) then
                    if ([lSeek] == 480) then
                        [returnAddress] = -2;
                    else
                        [wordAddress] = [ROOT_FILE + [lSeek]];
                        [lSeek] = [lSeek] + 1;
                        [returnAddress] = 0;
                    endif;
                else
                    if ([lSeek] == [INODE_TABLE + inodeIndex * 16 + 2]) then
                        [returnAddress] = -2;
                    else
                        alias diskBlock R11;
                        alias offset R12;
                        diskBlock = [INODE_TABLE + inodeIndex * 16 + 8 + ([lSeek] / 512)];
                        offset = [lSeek] % 512;

                        multipush(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);
                        R1 = 2;
                        R2 = diskBlock;
                        R3 = offset;
                        R4 = wordAddress;
                        call FILE_MANAGER; // buffer read
                        multipop(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);
                        [lSeek] = [lSeek] + 1;
                        [returnAddress] = 0;
                    endif;
                endif;
                
                multipush(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);
                R1 = 5;
                R2 = inodeIndex;
                R3 = [SYSTEM_STATUS_TABLE + 1];
                call RESOURCE_MANAGER; // relase inode
                multipop(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);
            endif;
        endif;
    endif;
else // Terminal Read
    alias wordAddress R3;
    wordAddress = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + (userSP - 3) % 512];

    multipush(R0, R1, R2, R3);

    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = wordAddress;

    call MOD_4;

    multipop(R0, R1, R2, R3);

    [returnAddress] = 0;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

ireturn;